/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _DDS_H_RPCGEN
#define _DDS_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define DDS_N_ANTENNAS 11
#define DDS_N_BASELINES 45
#define DDS_N_RECEIVERS 3
#define DDS_ALL_ANTENNAS 0
#define DDS_ALL_RECEIVERS 0
#define DDS_SUCCESS 1
#define DDS_FAILURE 0
#define DDS_NO_SUCH_ANTENNA 1
#define DDS_NO_SUCH_RECEIVER 2
#define DDS_FREQUENCY_TOO_LOW 3
#define DDS_FREQUENCY_TOO_HIGH 4
#define DDS_HARDWARE_ABSENT 5
#define DDS_INIT_ERROR 6
#define DDS_NO_SUCH_DDS 7
#define DDS_SET_FREQ_ERROR 8
#define DDS_SET_PHASE_ERROR 9
#define DDS_ILLEGAL_COMMAND 10
#define DDS_RESET_ERROR 11
#define DDS_NO_HAL 12
#define DDS_MUTEX_PROBLEM 13
#define DDS_RESET 0
#define DDS_SET_FREQUENCY 1
#define DDS_SET_PHASE 2
#define DDS_FREQ_AND_PHASE 3
#define DDS_DEBUG_ON 4
#define DDS_DEBUG_OFF 5
#define DDS_ADD_PHASE 6
#define DDS_HARDWARE_OFF 7
#define DDS_HARDWARE_ON 8
#define DDS_UPDATE_OFF 9
#define DDS_UPDATE_ON 10
#define DDS_GET_COORDS 11
#define DDS_GET_FREQUENCY 12
#define DDS_START_WALSH 13
#define DDS_WALSH_SKIP 14
#define DDS_BEACON_MODE 15
#define DDS_CELESTIAL_MODE 16
#define DDS_WALSH_ON 17
#define DDS_WALSH_OFF 18
#define DDS_DIE 19
#define DDS_ATM_ON 20
#define DDS_ATM_OFF 21
#define DDS_ATM_FLIP 22
#define DDS_LOBE_ROT_ON 23
#define DDS_LOBE_ROT_OFF 24
#define DDS_NDD_ACTIVE 25
#define DDS_NDD_INACTIVE 26
#define DDS_VLBI_MODE_ON 27
#define DDS_VLBI_MODE_OFF 28

struct dDSStatus {
	int status;
	int reason;
};
typedef struct dDSStatus dDSStatus;

struct dDSBaselines {
	double X[DDS_N_ANTENNAS];
	double Y[DDS_N_ANTENNAS];
	double Z[DDS_N_ANTENNAS];
};
typedef struct dDSBaselines dDSBaselines;

struct dDSBaselineReport {
	int antenna[DDS_N_ANTENNAS];
	double X[DDS_N_ANTENNAS];
	double Y[DDS_N_ANTENNAS];
	double Z[DDS_N_ANTENNAS];
};
typedef struct dDSBaselineReport dDSBaselineReport;

struct dDSSource {
	double hourAngle;
	double declination;
};
typedef struct dDSSource dDSSource;

struct dDSFrequency {
	double frequency[DDS_N_RECEIVERS];
	int gunnMultiple[DDS_N_RECEIVERS];
};
typedef struct dDSFrequency dDSFrequency;

struct dDSFringeRates {
	double rate1[DDS_N_ANTENNAS];
	double rate2[DDS_N_ANTENNAS];
};
typedef struct dDSFringeRates dDSFringeRates;

struct dDSCommand {
	int command;
	int antenna;
	int receiver;
	double refFrequency;
	double fringeRate1[DDS_N_ANTENNAS];
	double fringeRate2[DDS_N_ANTENNAS];
	double phase1[DDS_N_ANTENNAS];
	double phase2[DDS_N_ANTENNAS];
	char client[20];
};
typedef struct dDSCommand dDSCommand;

struct dDSInfo {
	int validPosition;
	int hardwareEnabled;
	double frequency[DDS_N_RECEIVERS];
	int gunnMultiple[DDS_N_RECEIVERS];
	double hourAngle;
	double declination;
	int frequencySign;
	int phaseSign;
	int dDS1Exists[DDS_N_ANTENNAS];
	double dDS1Rate[DDS_N_ANTENNAS];
	double dDS1Phase[DDS_N_ANTENNAS];
	int dDS2Exists[DDS_N_ANTENNAS];
	double dDS2Rate[DDS_N_ANTENNAS];
	double dDS2Phase[DDS_N_ANTENNAS];
	int delayTracking;
	int pattern[DDS_N_ANTENNAS];
	double delay[DDS_N_ANTENNAS];
	double baseline[DDS_N_BASELINES];
};
typedef struct dDSInfo dDSInfo;

struct dDSSignChange {
	int frequencySign;
	int phaseSign;
};
typedef struct dDSSignChange dDSSignChange;

struct dDSDelayRequest {
	int nWalsh;
	double startTime;
};
typedef struct dDSDelayRequest dDSDelayRequest;

struct dDSDelayValues {
	int status;
	int antennaExists[DDS_N_ANTENNAS];
	double delayHA;
	double delaySec[DDS_N_ANTENNAS];
	double delayConst1[DDS_N_ANTENNAS];
	double delayConst2[DDS_N_ANTENNAS];
	double delaySin[DDS_N_ANTENNAS];
	double delayCos[DDS_N_ANTENNAS];
};
typedef struct dDSDelayValues dDSDelayValues;

struct dDSuvw {
	double u[DDS_N_ANTENNAS];
	double v[DDS_N_ANTENNAS];
	double w[DDS_N_ANTENNAS];
	double X[DDS_N_ANTENNAS];
	double Y[DDS_N_ANTENNAS];
	double Z[DDS_N_ANTENNAS];
	double arrayRefLongitude;
	double arrayRefLatitude;
	double arrayRefElevation;
	double fixedDelays[DDS_N_ANTENNAS];
	double dayFraction;
	double UT1MinusUTC;
	double lST;
	double hourAngle;
	double declination;
	double trackingFrequency[DDS_N_RECEIVERS];
	int gunnMultiple[DDS_N_RECEIVERS];
	double fringeRates1[DDS_N_ANTENNAS];
	double fringeRates2[DDS_N_ANTENNAS];
};
typedef struct dDSuvw dDSuvw;

struct dDSuvwRequest {
	double UTC;
};
typedef struct dDSuvwRequest dDSuvwRequest;

struct dDSNDDConfig {
	int tone;
	int inject;
	int noiseAnt1;
	int noiseAnt2;
	float noise1Atten;
	float noise2Atten;
	float noise3Atten;
};
typedef struct dDSNDDConfig dDSNDDConfig;

struct dDSFrequencyOff {
	double offset;
};
typedef struct dDSFrequencyOff dDSFrequencyOff;

struct pAPToDDS {
	double phaseOffsets[DDS_N_ANTENNAS];
};
typedef struct pAPToDDS pAPToDDS;

struct dDSToPAP {
	double rA;
	double refLat;
	double refLong;
	double refRad;
	int antennaExists[DDS_N_ANTENNAS];
	double a[DDS_N_ANTENNAS];
	double b[DDS_N_ANTENNAS];
	double c[DDS_N_ANTENNAS];
};
typedef struct dDSToPAP dDSToPAP;

struct dDSRateOffsets {
	double offset[DDS_N_ANTENNAS];
};
typedef struct dDSRateOffsets dDSRateOffsets;

struct dDSWalshers {
	int shouldWalsh[DDS_N_ANTENNAS];
};
typedef struct dDSWalshers dDSWalshers;

struct dDSRotators {
	int shouldRotate[DDS_N_ANTENNAS];
};
typedef struct dDSRotators dDSRotators;

struct dDSWalshPattern {
	struct {
		u_int step_len;
		int *step_val;
	} step;
};
typedef struct dDSWalshPattern dDSWalshPattern;

struct dDSWalshPackage {
	struct {
		u_int pattern_len;
		dDSWalshPattern *pattern_val;
	} pattern;
	int interleave;
	int walshCycleTime;
	int startYear;
	int startDay;
	int startHour;
	int startMin;
	int startSec;
	int startuSec;
};
typedef struct dDSWalshPackage dDSWalshPackage;

#define DDSPROG 0x20000101
#define DDSVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define DDSREQUEST 1
extern  dDSStatus * ddsrequest_1(dDSCommand *, CLIENT *);
extern  dDSStatus * ddsrequest_1_svc(dDSCommand *, struct svc_req *);
#define DDSSOURCE 2
extern  dDSStatus * ddssource_1(dDSSource *, CLIENT *);
extern  dDSStatus * ddssource_1_svc(dDSSource *, struct svc_req *);
#define DDSRATES 3
extern  dDSFringeRates * ddsrates_1(dDSCommand *, CLIENT *);
extern  dDSFringeRates * ddsrates_1_svc(dDSCommand *, struct svc_req *);
#define DDSINFO 4
extern  dDSInfo * ddsinfo_1(dDSCommand *, CLIENT *);
extern  dDSInfo * ddsinfo_1_svc(dDSCommand *, struct svc_req *);
#define DDSSIGN 5
extern  dDSStatus * ddssign_1(dDSSignChange *, CLIENT *);
extern  dDSStatus * ddssign_1_svc(dDSSignChange *, struct svc_req *);
#define DDSFREQUENCY 6
extern  dDSStatus * ddsfrequency_1(dDSFrequency *, CLIENT *);
extern  dDSStatus * ddsfrequency_1_svc(dDSFrequency *, struct svc_req *);
#define DDSSETBASELINES 7
extern  dDSStatus * ddssetbaselines_1(dDSBaselines *, CLIENT *);
extern  dDSStatus * ddssetbaselines_1_svc(dDSBaselines *, struct svc_req *);
#define DDSGETDELAY 8
extern  dDSDelayValues * ddsgetdelay_1(dDSDelayRequest *, CLIENT *);
extern  dDSDelayValues * ddsgetdelay_1_svc(dDSDelayRequest *, struct svc_req *);
#define DDSREPORTBASELINES 9
extern  dDSBaselineReport * ddsreportbaselines_1(dDSCommand *, CLIENT *);
extern  dDSBaselineReport * ddsreportbaselines_1_svc(dDSCommand *, struct svc_req *);
#define DDSGETUVW 10
extern  dDSuvw * ddsgetuvw_1(dDSuvwRequest *, CLIENT *);
extern  dDSuvw * ddsgetuvw_1_svc(dDSuvwRequest *, struct svc_req *);
#define DDSNDDCONFIGURE 11
extern  dDSStatus * ddsnddconfigure_1(dDSNDDConfig *, CLIENT *);
extern  dDSStatus * ddsnddconfigure_1_svc(dDSNDDConfig *, struct svc_req *);
#define DDSOFFSETFREQ 12
extern  dDSStatus * ddsoffsetfreq_1(dDSFrequencyOff *, CLIENT *);
extern  dDSStatus * ddsoffsetfreq_1_svc(dDSFrequencyOff *, struct svc_req *);
#define DDSPAPUPDATE 13
extern  dDSToPAP * ddspapupdate_1(pAPToDDS *, CLIENT *);
extern  dDSToPAP * ddspapupdate_1_svc(pAPToDDS *, struct svc_req *);
#define DDSSETOFFSETS 14
extern  dDSStatus * ddssetoffsets_1(dDSRateOffsets *, CLIENT *);
extern  dDSStatus * ddssetoffsets_1_svc(dDSRateOffsets *, struct svc_req *);
#define DDSSETWALSHERS 15
extern  dDSStatus * ddssetwalshers_1(dDSWalshers *, CLIENT *);
extern  dDSStatus * ddssetwalshers_1_svc(dDSWalshers *, struct svc_req *);
#define DDSSETROTATORS 16
extern  dDSStatus * ddssetrotators_1(dDSRotators *, CLIENT *);
extern  dDSStatus * ddssetrotators_1_svc(dDSRotators *, struct svc_req *);
#define DDSGETWALSHPATTERNS 17
extern  dDSWalshPackage * ddsgetwalshpatterns_1(dDSCommand *, CLIENT *);
extern  dDSWalshPackage * ddsgetwalshpatterns_1_svc(dDSCommand *, struct svc_req *);
extern int ddsprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define DDSREQUEST 1
extern  dDSStatus * ddsrequest_1();
extern  dDSStatus * ddsrequest_1_svc();
#define DDSSOURCE 2
extern  dDSStatus * ddssource_1();
extern  dDSStatus * ddssource_1_svc();
#define DDSRATES 3
extern  dDSFringeRates * ddsrates_1();
extern  dDSFringeRates * ddsrates_1_svc();
#define DDSINFO 4
extern  dDSInfo * ddsinfo_1();
extern  dDSInfo * ddsinfo_1_svc();
#define DDSSIGN 5
extern  dDSStatus * ddssign_1();
extern  dDSStatus * ddssign_1_svc();
#define DDSFREQUENCY 6
extern  dDSStatus * ddsfrequency_1();
extern  dDSStatus * ddsfrequency_1_svc();
#define DDSSETBASELINES 7
extern  dDSStatus * ddssetbaselines_1();
extern  dDSStatus * ddssetbaselines_1_svc();
#define DDSGETDELAY 8
extern  dDSDelayValues * ddsgetdelay_1();
extern  dDSDelayValues * ddsgetdelay_1_svc();
#define DDSREPORTBASELINES 9
extern  dDSBaselineReport * ddsreportbaselines_1();
extern  dDSBaselineReport * ddsreportbaselines_1_svc();
#define DDSGETUVW 10
extern  dDSuvw * ddsgetuvw_1();
extern  dDSuvw * ddsgetuvw_1_svc();
#define DDSNDDCONFIGURE 11
extern  dDSStatus * ddsnddconfigure_1();
extern  dDSStatus * ddsnddconfigure_1_svc();
#define DDSOFFSETFREQ 12
extern  dDSStatus * ddsoffsetfreq_1();
extern  dDSStatus * ddsoffsetfreq_1_svc();
#define DDSPAPUPDATE 13
extern  dDSToPAP * ddspapupdate_1();
extern  dDSToPAP * ddspapupdate_1_svc();
#define DDSSETOFFSETS 14
extern  dDSStatus * ddssetoffsets_1();
extern  dDSStatus * ddssetoffsets_1_svc();
#define DDSSETWALSHERS 15
extern  dDSStatus * ddssetwalshers_1();
extern  dDSStatus * ddssetwalshers_1_svc();
#define DDSSETROTATORS 16
extern  dDSStatus * ddssetrotators_1();
extern  dDSStatus * ddssetrotators_1_svc();
#define DDSGETWALSHPATTERNS 17
extern  dDSWalshPackage * ddsgetwalshpatterns_1();
extern  dDSWalshPackage * ddsgetwalshpatterns_1_svc();
extern int ddsprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_dDSStatus (XDR *, dDSStatus*);
extern  bool_t xdr_dDSBaselines (XDR *, dDSBaselines*);
extern  bool_t xdr_dDSBaselineReport (XDR *, dDSBaselineReport*);
extern  bool_t xdr_dDSSource (XDR *, dDSSource*);
extern  bool_t xdr_dDSFrequency (XDR *, dDSFrequency*);
extern  bool_t xdr_dDSFringeRates (XDR *, dDSFringeRates*);
extern  bool_t xdr_dDSCommand (XDR *, dDSCommand*);
extern  bool_t xdr_dDSInfo (XDR *, dDSInfo*);
extern  bool_t xdr_dDSSignChange (XDR *, dDSSignChange*);
extern  bool_t xdr_dDSDelayRequest (XDR *, dDSDelayRequest*);
extern  bool_t xdr_dDSDelayValues (XDR *, dDSDelayValues*);
extern  bool_t xdr_dDSuvw (XDR *, dDSuvw*);
extern  bool_t xdr_dDSuvwRequest (XDR *, dDSuvwRequest*);
extern  bool_t xdr_dDSNDDConfig (XDR *, dDSNDDConfig*);
extern  bool_t xdr_dDSFrequencyOff (XDR *, dDSFrequencyOff*);
extern  bool_t xdr_pAPToDDS (XDR *, pAPToDDS*);
extern  bool_t xdr_dDSToPAP (XDR *, dDSToPAP*);
extern  bool_t xdr_dDSRateOffsets (XDR *, dDSRateOffsets*);
extern  bool_t xdr_dDSWalshers (XDR *, dDSWalshers*);
extern  bool_t xdr_dDSRotators (XDR *, dDSRotators*);
extern  bool_t xdr_dDSWalshPattern (XDR *, dDSWalshPattern*);
extern  bool_t xdr_dDSWalshPackage (XDR *, dDSWalshPackage*);

#else /* K&R C */
extern bool_t xdr_dDSStatus ();
extern bool_t xdr_dDSBaselines ();
extern bool_t xdr_dDSBaselineReport ();
extern bool_t xdr_dDSSource ();
extern bool_t xdr_dDSFrequency ();
extern bool_t xdr_dDSFringeRates ();
extern bool_t xdr_dDSCommand ();
extern bool_t xdr_dDSInfo ();
extern bool_t xdr_dDSSignChange ();
extern bool_t xdr_dDSDelayRequest ();
extern bool_t xdr_dDSDelayValues ();
extern bool_t xdr_dDSuvw ();
extern bool_t xdr_dDSuvwRequest ();
extern bool_t xdr_dDSNDDConfig ();
extern bool_t xdr_dDSFrequencyOff ();
extern bool_t xdr_pAPToDDS ();
extern bool_t xdr_dDSToPAP ();
extern bool_t xdr_dDSRateOffsets ();
extern bool_t xdr_dDSWalshers ();
extern bool_t xdr_dDSRotators ();
extern bool_t xdr_dDSWalshPattern ();
extern bool_t xdr_dDSWalshPackage ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_DDS_H_RPCGEN */
